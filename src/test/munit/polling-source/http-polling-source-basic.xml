<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">

    <munit:config name="http-polling-source-basic.xml" />

    <munit:dynamic-port propertyName="dynamic.port"/>

    <http:listener-config name="targetEndpoint">
        <http:listener-connection host="0.0.0.0" port="${dynamic.port}"/>
    </http:listener-config>

    <http:request-config name="requestConfig">
        <http:request-connection host="localhost" port="${dynamic.port}" />
    </http:request-config>

    <flow name="targetFlow" >
        <http:listener config-ref="targetEndpoint" path="/test" />
        <choice>
            <when expression="#[message.attributes.headers['testHeader'] != null]">
                <set-payload value="#['Received header: ' ++ message.attributes.headers['testHeader']]"/>
            </when>
            <otherwise>
                <set-payload value="test payload"/>
            </otherwise>
        </choice>

        <choice>
            <when expression="#[message.attributes.queryParams['testQueryParam'] != null]">
                <set-payload value="#[payload ++ ' - ' ++ message.attributes.queryParams['testQueryParam']]"/>
            </when>
        </choice>
    </flow>

    <flow name="targetFlowPost" >
        <http:listener config-ref="targetEndpoint" path="/test-post" allowedMethods="POST"/>
        <set-payload value="test payload"/>
    </flow>

    <flow name="basic-polling">
        <http:polling-source config-ref="requestConfig" path="test">
            <scheduling-strategy >
                <fixed-frequency frequency="2" timeUnit="SECONDS"/>
            </scheduling-strategy>
        </http:polling-source>
        <logger message="#[payload]"/>
        <munit-tools:queue queueName="test_queue_1">
            <munit-tools:value>#[payload]</munit-tools:value>
        </munit-tools:queue>
    </flow>

    <flow name="basic-polling-post">
        <http:polling-source config-ref="requestConfig" path="test-post" method="POST">
            <scheduling-strategy >
                <fixed-frequency frequency="2" timeUnit="SECONDS"/>
            </scheduling-strategy>
        </http:polling-source>
        <logger message="#[payload]"/>
        <munit-tools:queue queueName="test_queue_3">
            <munit-tools:value>#[payload]</munit-tools:value>
        </munit-tools:queue>
    </flow>

    <flow name="basic-polling-with-header">
        <http:polling-source config-ref="requestConfig" path="test">
            <scheduling-strategy >
                <fixed-frequency frequency="2" timeUnit="SECONDS"/>
            </scheduling-strategy>
            <http:request-headers >
                <http:request-header key="testHeader" value="Messi" />
            </http:request-headers>
        </http:polling-source>
        <logger message="#[payload]"/>
        <munit-tools:queue queueName="test_queue_2">
            <munit-tools:value>#[payload]</munit-tools:value>
        </munit-tools:queue>
    </flow>

    <flow name="basic-polling-with-query-params">
        <http:polling-source config-ref="requestConfig" path="test">
            <scheduling-strategy >
                <fixed-frequency frequency="2" timeUnit="SECONDS"/>
            </scheduling-strategy>
            <http:request-query-params >
                <http:query-param key="testQueryParam" value="parameter value" />
            </http:request-query-params>
        </http:polling-source>
        <logger message="#[payload]"/>
        <munit-tools:queue queueName="test_queue_4">
            <munit-tools:value>#[payload]</munit-tools:value>
        </munit-tools:queue>
    </flow>

    <munit:test name="basic-polling-test-case">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="targetFlow" />
            <munit:enable-flow-source value="basic-polling" />
        </munit:enable-flow-sources>
        <munit:execution>
            <munit-tools:dequeue timeout="5" timeoutUnit="SECONDS" queueName="test_queue_1"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('test payload')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="polling-done-several-times-test-case">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="targetFlow" />
            <munit:enable-flow-source value="basic-polling" />
        </munit:enable-flow-sources>
        <munit:execution>
            <munit-tools:dequeue timeout="3" timeoutUnit="SECONDS" queueName="test_queue_1"/>
            <munit-tools:dequeue timeout="3" timeoutUnit="SECONDS" queueName="test_queue_1"/>
            <munit-tools:dequeue timeout="3" timeoutUnit="SECONDS" queueName="test_queue_1"/>
            <munit-tools:sleep time="2" timeUnit="SECONDS"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('test payload')]"/>
            <munit-tools:assert-that expression="#[MunitTools::queueSize('test_queue_1')]" is="#[MunitTools::greaterThanOrEqualTo(1)]" />
        </munit:validation>
    </munit:test>

    <munit:test name="polling-with-header-test-case">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="targetFlow" />
            <munit:enable-flow-source value="basic-polling-with-header" />
        </munit:enable-flow-sources>
        <munit:execution>
            <munit-tools:dequeue timeout="3" timeoutUnit="SECONDS" queueName="test_queue_2"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('Received header: Messi')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="polling-post-test-case">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="targetFlowPost" />
            <munit:enable-flow-source value="basic-polling-post" />
        </munit:enable-flow-sources>
        <munit:execution>
            <munit-tools:dequeue timeout="3" timeoutUnit="SECONDS" queueName="test_queue_3"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('test payload')]"/>
        </munit:validation>
    </munit:test>


    <munit:test name="polling-query-params-test-case">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="targetFlow" />
            <munit:enable-flow-source value="basic-polling-with-query-params" />
        </munit:enable-flow-sources>
        <munit:execution>
            <munit-tools:dequeue timeout="3" timeoutUnit="SECONDS" queueName="test_queue_4"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('test payload - parameter value')]"/>
        </munit:validation>
    </munit:test>

</mule>