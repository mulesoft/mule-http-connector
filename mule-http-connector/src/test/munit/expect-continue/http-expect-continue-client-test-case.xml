<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:http-mock="http://www.mulesoft.org/schema/mule/http-mock"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xsi:schemaLocation="
               http://www.mulesoft.org/schema/mule/http-mock http://www.mulesoft.org/schema/mule/http-mock/current/mule-http-mock.xsd
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		       http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
               http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">


    <munit:config name="http-expect-continue-server-test-case"/>
    <munit:dynamic-port propertyName="dynamic.port"/>

    <!-- Mock server config -->
    <http-mock:server-config name="serverConfig">
        <http-mock:server-connection port="${dynamic.port}"/>
    </http-mock:server-config>

    <http:request-config name="HTTP_Request_configuration" enableCookies="true">
        <http:request-connection host="localhost" port="${dynamic.port}"/>
    </http:request-config>
    <munit:test name="expect100ContinueTestWithValidResponse"
                description="Send a Http POST with Expect 100 and server responds correctly">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="<!--    The below tests have http-listener component and use wiremock client to send a request-->

    <http-mock:client-config name="expectContinueClientConfig"/>

            <http:listener-config name="listenerConfig">
                <http:listener-connection host="localhost" port="${dynamic.port}"/>
            </http:listener-config>

            <munit:test name="testExpect100ContinueBehaviourForServer">
                <munit:enable-flow-sources>
                    <munit:enable-flow-source value="expect100ContinueTestForListenerWithValidResponseFlow"/>
                </munit:enable-flow-sources>
                <munit:execution>
                    <http-mock:do-post config-ref="expectContinueClientConfig" url="http://localhost:${dynamic.port}/continue-1"
                                       requestHeaders="#[{'Expect' : '100-continue'}]" payload="#['some very large payload here']"/>
                </munit:execution>
                <munit:validation>
                    <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
                    <munit-tools:assert-that expression="#[attributes.reasonPhrase]" is="#[MunitTools::equalTo('OK')]"/>
                    <munit-tools:assert-that expression="#[%dw 2.0 output application/java --- payload.^raw as String]"
                                             is="#[MunitTools::equalTo('some very large payload here')]"/>
                </munit:validation>
            </munit:test>

            <flow name="expect100ContinueTestForListenerWithValidResponseFlow">
                <http:listener config-ref="listenerConfig"  path="/continue-1" responseStreamingMode="AUTO"/>

                <logger message="Headers: #[attributes.headers]" level="INFO"/>
                <logger message="Payload received: #[payload]" level="INFO"/>

                <set-payload value="#[%dw 2.0 output application/java --- payload.^raw as String]"/>
            </flow>



            "/>
        </munit:enable-flow-sources>
        <munit:execution>
            <http:request method="POST" config-ref="HTTP_Request_configuration" path="/continue">
                <http:body>
                    <![CDATA[#['some very large response to server']]]>
                </http:body>
                <http:headers>
                    <![CDATA[#[{
                'Expect': '100-continue',
                'Content-Type': 'application/json',
                'Content-Length': '160'
                }]]]>
                </http:headers>
            </http:request>
            <set-variable value="#[payload as String]" variableName="response"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-equals actual="#[vars.response]" expected='#["Response from server"]'/>
        </munit:validation>
    </munit:test>
    <flow name="expect100ContinueTestWithValidResponseFlow">
        <http-mock:server-endpoint config-ref="serverConfig" path="/continue">
            <http-mock:response statusCode="200" reasonPhrase="Created" >
                <http-mock:body>#['Response from server']</http-mock:body>
                <http-mock:headers>#[{'Content-Type': 'text/plain; charset=UTF-8', 'X-Custom': 'custom-value'}]</http-mock:headers>
            </http-mock:response>
        </http-mock:server-endpoint>
        <logger />
    </flow>

    <munit:test name="expect100ContinueTestWithErrorResponse"
                description="Send an HTTP POST with Expect 100 and server responds with an error (417 Expectation Failed)"
               >
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="expect100ContinueTestWithErrorResponseFlow"/>
        </munit:enable-flow-sources>

        <munit:execution>
            <try>
                <http:request method="POST"
                              config-ref="HTTP_Request_configuration"
                              path="/continue-error">
                    <http:body>
                        <![CDATA[#['some very large response to server']]]>
                    </http:body>
                    <http:headers>
                        <![CDATA[#[{
                'Expect': '100-continue',
                'Content-Type': 'application/json'
            }]]]>
                    </http:headers>
                </http:request>
                <set-variable value="#[payload as String]" variableName="successPayload"/>
                <error-handler >
                    <on-error-continue enableNotifications="true" logException="true">
                        <set-variable value="#[error.description]" variableName="errorMessage"/>
                    </on-error-continue>
                </error-handler>
            </try>

        </munit:execution>

        <munit:validation>
            <munit-tools:assert-that is="#[MunitTools::containsString('failed with status code 417.')]" expression="#[vars.errorMessage]"/>
        </munit:validation>
    </munit:test>
    <flow name="expect100ContinueTestWithErrorResponseFlow">
        <http-mock:server-endpoint config-ref="serverConfig" path="/continue-error">
            <http-mock:response statusCode="417" reasonPhrase="Expectation Failed">
                <http-mock:body>
                    <![CDATA[#['Expectation Failed']]]>
                </http-mock:body>
            </http-mock:response>
        </http-mock:server-endpoint>
        <logger />
    </flow>
</mule>
