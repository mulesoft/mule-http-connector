<?xml version="1.0" encoding="UTF-8"?>
<mule
        xmlns:http-mock="http://www.mulesoft.org/schema/mule/http-mock"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
        xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
        xmlns="http://www.mulesoft.org/schema/mule/core"
        xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http-mock http://www.mulesoft.org/schema/mule/http-mock/current/mule-http-mock.xsd
      		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      				http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
      						http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
    <munit:config name="expect-100-continue-test-case.xml"/>
    <!-- Mock server config -->
    <munit:dynamic-port propertyName="mock.dynamic.port"/>
    <http-mock:server-config name="expectContinueServerConfig">
        <http-mock:server-connection port="${mock.dynamic.port}"/>
    </http-mock:server-config>

    <!-- Configure client for testing the mock server -->
    <http-mock:client-config name="expectContinueClientConfig"/>

    <!-- Test case for expect 100 continue successfully  -->
    <flow name="mockExpect100ContinueFlow">
        <http-mock:server-endpoint config-ref="expectContinueServerConfig"
                                   path="/mock">
            <!-- Echo back the incoming payload for assertions-->
            <http-mock:response statusCode="200" reasonPhrase="OK">
                <http-mock:body>
                    <![CDATA[#[payload]]]>
                </http-mock:body>
            </http-mock:response>
        </http-mock:server-endpoint>
        <logger />
    </flow>
    <munit:test name="testExpect100ContinueBehaviour">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="mockExpect100ContinueFlow"/>
        </munit:enable-flow-sources>
        <munit:execution>
            <http-mock:do-post config-ref="expectContinueClientConfig" url="http://localhost:${mock.dynamic.port}/mock"
                               requestHeaders="#[{'Expect' : '100-continue'}]" payload="#['some very large payload here']"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <munit-tools:assert-that expression="#[attributes.reasonPhrase]" is="#[MunitTools::equalTo('OK')]"/>
            <munit-tools:assert-that expression="#[%dw 2.0 output application/java --- payload.^raw as String]"
                                     is="#[MunitTools::equalTo('some very large payload here')]"/>
        </munit:validation>
    </munit:test>

    <!-- Test case for expect 100 continue server and responds with 417 -->
    <flow name="mockExpect417Flow">
        <http-mock:server-endpoint config-ref="expectContinueServerConfig" path="/mock">
            <http-mock:response statusCode="417" reasonPhrase="Expectation Failed">
                <http-mock:body>
                    <![CDATA[#['Expectation Failed']]]>
                </http-mock:body>
            </http-mock:response>
        </http-mock:server-endpoint>
        <logger />
    </flow>
    <munit:test name="testExpectHeaderRejected">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="mockExpect417Flow" />
        </munit:enable-flow-sources>
        <munit:execution>
            <http-mock:do-post config-ref="expectContinueClientConfig"
                               url="http://localhost:${mock.dynamic.port}/mock"
                               requestHeaders="#[{'Expect' : '100-continue'}]"
                               payload="#['some very large payload here']" />
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(417)]" />
            <munit-tools:assert-that
                    expression="#[%dw 2.0 output application/java --- (payload.^raw as String)]"
                    is="#[MunitTools::equalTo('Expectation Failed')]" />
        </munit:validation>
    </munit:test>

    <!-- Test case for expect 100 continue when client sends a bad header  -->
    <flow name="mockInvalidExpectFlow">
        <http-mock:server-endpoint config-ref="expectContinueServerConfig" path="/mock">
            <http-mock:response statusCode="417" reasonPhrase="Expectation Failed"/>
        </http-mock:server-endpoint>
        <logger />
    </flow>

    <munit:test name="testInvalidExpectHeader">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="mockInvalidExpectFlow" />
        </munit:enable-flow-sources>

        <munit:execution>
            <http-mock:do-post config-ref="expectContinueClientConfig"
                               url="http://localhost:${mock.dynamic.port}/mock"
                               requestHeaders="#[{'Expect' : 'invalid-expect'}]"
                               payload="#['payload with invalid expect']" />
        </munit:execution>

        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(417)]" />
            <munit-tools:assert-that
                    expression="#[%dw 2.0 output application/java --- payload.^raw as String]"
                    is="#[MunitTools::containsString('Bad Message 417')]" />
        </munit:validation>
    </munit:test>



</mule>
